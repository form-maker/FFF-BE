name: Deploy to Amazon EC2

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

# 본인이 설정한 값을 여기서 채워넣습니다.
# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: form-maker-fff-s3-bucket
  CODE_DEPLOY_APPLICATION_NAME: form-maker-fff-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: form-maker-fff-deployment-group

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      # (1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # (2) JDK 17 셋팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 비밀 문서 설정1
      - name: Copy Secret1
        env:
          OCCUPY_SECRET1: ${{ secrets.OCCUPY_SECRET1 }}
          OCCUPY_SECRET1_DIR: src/main/resources
          OCCUPY_SECRET1_DIR_FILE_NAME: application-db.properties
        run: echo $OCCUPY_SECRET1 | base64 --decode > $OCCUPY_SECRET1_DIR/$OCCUPY_SECRET1_DIR_FILE_NAME

      # 비밀 문서 설정2
      - name: Copy Secret1
        env:
          OCCUPY_SECRET2: ${{ secrets.OCCUPY_SECRET2 }}
          OCCUPY_SECRET2_DIR: src/main/resources
          OCCUPY_SECRET2_DIR_FILE_NAME: application-key.properties
        run: echo $OCCUPY_SECRET2 | base64 --decode > $OCCUPY_SECRET2_DIR/$OCCUPY_SECRET2_DIR_FILE_NAME

      # (3) Gradlew 권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # (4) Gradle build
      - name: Build with Gradle
        uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
        with:
          arguments: clean build -x test

      # (5) AWS 인증 (IAM 사용자 Access key, Secret key 활용
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # (6) 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --ignore-hidden-files \
            --source .

      # (7) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip